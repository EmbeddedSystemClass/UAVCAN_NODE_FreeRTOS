ARM GAS  /tmp/ccpYWkgm.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.StartTask02,"ax",%progbits
  16              		.align	1
  17              		.global	StartTask02
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	StartTask02:
  24              	.LFB76:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
  33:Src/main.c    ****   *
ARM GAS  /tmp/ccpYWkgm.s 			page 2


  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f1xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** #include "canard.h"
  54:Src/main.c    **** #include "canard_stm32.h"
  55:Src/main.c    **** #include "uavcan.h"
  56:Src/main.c    **** #include <stdio.h>
  57:Src/main.c    **** #include <stdlib.h>
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE BEGIN Includes */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE END Includes */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** CAN_HandleTypeDef hcan;
  65:Src/main.c    **** 
  66:Src/main.c    **** UART_HandleTypeDef huart1;
  67:Src/main.c    **** 
  68:Src/main.c    **** osThreadId Task01Handle;
  69:Src/main.c    **** osThreadId Task02Handle;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE END PV */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** void SystemClock_Config(void);
  78:Src/main.c    **** static void MX_GPIO_Init(void);
  79:Src/main.c    **** static void MX_USART1_UART_Init(void);
  80:Src/main.c    **** static void MX_CAN_Init(void);
  81:Src/main.c    **** void StartTask01(void const * argument);
  82:Src/main.c    **** void StartTask02(void const * argument);
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE BEGIN PFP */
  85:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  86:Src/main.c    **** 
  87:Src/main.c    **** /* USER CODE END PFP */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE BEGIN 0 */
  90:Src/main.c    **** 
ARM GAS  /tmp/ccpYWkgm.s 			page 3


  91:Src/main.c    **** /* USER CODE END 0 */
  92:Src/main.c    **** 
  93:Src/main.c    **** /**
  94:Src/main.c    ****   * @brief  The application entry point.
  95:Src/main.c    ****   *
  96:Src/main.c    ****   * @retval None
  97:Src/main.c    ****   */
  98:Src/main.c    **** int main(void)
  99:Src/main.c    **** {
 100:Src/main.c    ****   /* USER CODE BEGIN 1 */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE END 1 */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 107:Src/main.c    ****   HAL_Init();
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE BEGIN Init */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE END Init */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* Configure the system clock */
 114:Src/main.c    ****   SystemClock_Config();
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END SysInit */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* Initialize all configured peripherals */
 121:Src/main.c    ****   MX_GPIO_Init();
 122:Src/main.c    ****   MX_USART1_UART_Init();
 123:Src/main.c    ****   MX_CAN_Init();
 124:Src/main.c    ****   uavcanInit();
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN 2 */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END 2 */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 131:Src/main.c    ****   /* add mutexes, ... */
 132:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 135:Src/main.c    ****   /* add semaphores, ... */
 136:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 139:Src/main.c    ****   /* start timers, add new ones, ... */
 140:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* Create the thread(s) */
 143:Src/main.c    ****   /* definition and creation of Task01 */
 144:Src/main.c    ****   osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 256);
 145:Src/main.c    ****   Task01Handle = osThreadCreate(osThread(Task01), NULL);
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* definition and creation of Task02 */
ARM GAS  /tmp/ccpYWkgm.s 			page 4


 148:Src/main.c    ****   osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 149:Src/main.c    ****   Task02Handle = osThreadCreate(osThread(Task02), NULL);
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 152:Src/main.c    ****   /* add threads, ... */
 153:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 156:Src/main.c    ****   /* add queues, ... */
 157:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 158:Src/main.c    ****    
 159:Src/main.c    ****   /* Start scheduler */
 160:Src/main.c    ****   osKernelStart();
 161:Src/main.c    ****   
 162:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 163:Src/main.c    **** 
 164:Src/main.c    ****   /* Infinite loop */
 165:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 166:Src/main.c    ****   while (1)
 167:Src/main.c    ****   {
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* USER CODE END WHILE */
 170:Src/main.c    ****   
 171:Src/main.c    ****   /* USER CODE BEGIN 3 */
 172:Src/main.c    **** 
 173:Src/main.c    ****   }
 174:Src/main.c    ****   /* USER CODE END 3 */
 175:Src/main.c    **** 
 176:Src/main.c    **** }
 177:Src/main.c    **** 
 178:Src/main.c    **** /**
 179:Src/main.c    ****   * @brief System Clock Configuration
 180:Src/main.c    ****   * @retval None
 181:Src/main.c    ****   */
 182:Src/main.c    **** void SystemClock_Config(void)
 183:Src/main.c    **** {
 184:Src/main.c    **** 
 185:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 186:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 187:Src/main.c    **** 
 188:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 189:Src/main.c    ****     */
 190:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 191:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 192:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 193:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 197:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 198:Src/main.c    ****   {
 199:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 200:Src/main.c    ****   }
 201:Src/main.c    **** 
 202:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 203:Src/main.c    ****     */
 204:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
ARM GAS  /tmp/ccpYWkgm.s 			page 5


 205:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 206:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 207:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 208:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 209:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 210:Src/main.c    **** 
 211:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 212:Src/main.c    ****   {
 213:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 214:Src/main.c    ****   }
 215:Src/main.c    **** 
 216:Src/main.c    ****     /**Configure the Systick interrupt time 
 217:Src/main.c    ****     */
 218:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 219:Src/main.c    **** 
 220:Src/main.c    ****     /**Configure the Systick 
 221:Src/main.c    ****     */
 222:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 223:Src/main.c    **** 
 224:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 225:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 226:Src/main.c    **** }
 227:Src/main.c    **** 
 228:Src/main.c    **** /* CAN init function */
 229:Src/main.c    **** static void MX_CAN_Init(void)
 230:Src/main.c    **** {
 231:Src/main.c    **** 
 232:Src/main.c    ****   hcan.Instance = CAN1;
 233:Src/main.c    ****   hcan.Init.Prescaler = 16;
 234:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 235:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 236:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_1TQ;
 237:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_1TQ;
 238:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 239:Src/main.c    ****   hcan.Init.ABOM = DISABLE;
 240:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 241:Src/main.c    ****   hcan.Init.NART = DISABLE;
 242:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 243:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 244:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 245:Src/main.c    ****   {
 246:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 247:Src/main.c    ****   }
 248:Src/main.c    **** 
 249:Src/main.c    **** }
 250:Src/main.c    **** 
 251:Src/main.c    **** /* USART1 init function */
 252:Src/main.c    **** static void MX_USART1_UART_Init(void)
 253:Src/main.c    **** {
 254:Src/main.c    **** 
 255:Src/main.c    ****   huart1.Instance = USART1;
 256:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 257:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 258:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 259:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 260:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 261:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
ARM GAS  /tmp/ccpYWkgm.s 			page 6


 262:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 263:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 264:Src/main.c    ****   {
 265:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 266:Src/main.c    ****   }
 267:Src/main.c    **** 
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** /** Configure pins as 
 271:Src/main.c    ****         * Analog 
 272:Src/main.c    ****         * Input 
 273:Src/main.c    ****         * Output
 274:Src/main.c    ****         * EVENT_OUT
 275:Src/main.c    ****         * EXTI
 276:Src/main.c    **** */
 277:Src/main.c    **** static void MX_GPIO_Init(void)
 278:Src/main.c    **** {
 279:Src/main.c    **** 
 280:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 281:Src/main.c    **** 
 282:Src/main.c    ****   /* GPIO Ports Clock Enable */
 283:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 284:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 285:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 286:Src/main.c    **** 
 287:Src/main.c    ****   /*Configure GPIO pin Output Level */
 288:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_SET);
 289:Src/main.c    **** 
 290:Src/main.c    ****   /*Configure GPIO pins : PB12 PB13 PB14 */
 291:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 292:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 293:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 294:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 295:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 296:Src/main.c    **** 
 297:Src/main.c    **** }
 298:Src/main.c    **** 
 299:Src/main.c    **** /* USER CODE BEGIN 4 */
 300:Src/main.c    **** 
 301:Src/main.c    **** /* USER CODE END 4 */
 302:Src/main.c    **** 
 303:Src/main.c    **** /* USER CODE BEGIN Header_StartTask01 */
 304:Src/main.c    **** /**
 305:Src/main.c    ****   * @brief  Function implementing the Task01 thread.
 306:Src/main.c    ****   * @param  argument: Not used 
 307:Src/main.c    ****   * @retval None
 308:Src/main.c    ****   */
 309:Src/main.c    **** /* USER CODE END Header_StartTask01 */
 310:Src/main.c    **** void StartTask01(void const * argument)
 311:Src/main.c    **** {
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* USER CODE BEGIN 5 */
 314:Src/main.c    ****   /* Infinite loop */
 315:Src/main.c    ****   while(1)
 316:Src/main.c    ****   {
 317:Src/main.c    ****     sendCanard();
 318:Src/main.c    ****     receiveCanard();
ARM GAS  /tmp/ccpYWkgm.s 			page 7


 319:Src/main.c    ****     spinCanard();
 320:Src/main.c    ****   }
 321:Src/main.c    ****   /* USER CODE END 5 */ 
 322:Src/main.c    **** }
 323:Src/main.c    **** 
 324:Src/main.c    **** /* USER CODE BEGIN Header_StartTask02 */
 325:Src/main.c    **** /**
 326:Src/main.c    **** * @brief Function implementing the Task02 thread.
 327:Src/main.c    **** * @param argument: Not used
 328:Src/main.c    **** * @retval None
 329:Src/main.c    **** */
 330:Src/main.c    **** /* USER CODE END Header_StartTask02 */
 331:Src/main.c    **** void StartTask02(void const * argument)
 332:Src/main.c    **** {
  26              		.loc 1 332 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              	.L2:
  34 0000 FEE7     		b	.L2
  35              		.cfi_endproc
  36              	.LFE76:
  38              		.section	.text.MX_GPIO_Init,"ax",%progbits
  39              		.align	1
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	MX_GPIO_Init:
  46              	.LFB74:
 278:Src/main.c    **** 
  47              		.loc 1 278 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 32
  50              		@ frame_needed = 0, uses_anonymous_args = 0
 278:Src/main.c    **** 
  51              		.loc 1 278 0
  52 0000 10B5     		push	{r4, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 8
  55              		.cfi_offset 4, -8
  56              		.cfi_offset 14, -4
  57 0002 88B0     		sub	sp, sp, #32
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 40
  60              	.LBB2:
 283:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  61              		.loc 1 283 0
  62 0004 184B     		ldr	r3, .L5
  63 0006 9A69     		ldr	r2, [r3, #24]
  64 0008 42F02002 		orr	r2, r2, #32
  65 000c 9A61     		str	r2, [r3, #24]
  66 000e 9A69     		ldr	r2, [r3, #24]
  67 0010 02F02002 		and	r2, r2, #32
ARM GAS  /tmp/ccpYWkgm.s 			page 8


  68 0014 0192     		str	r2, [sp, #4]
  69 0016 019A     		ldr	r2, [sp, #4]
  70              	.LBE2:
  71              	.LBB3:
 284:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  72              		.loc 1 284 0
  73 0018 9A69     		ldr	r2, [r3, #24]
  74 001a 42F00802 		orr	r2, r2, #8
  75 001e 9A61     		str	r2, [r3, #24]
  76 0020 9A69     		ldr	r2, [r3, #24]
  77 0022 02F00802 		and	r2, r2, #8
  78 0026 0292     		str	r2, [sp, #8]
  79 0028 029A     		ldr	r2, [sp, #8]
  80              	.LBE3:
  81              	.LBB4:
 285:Src/main.c    **** 
  82              		.loc 1 285 0
  83 002a 9A69     		ldr	r2, [r3, #24]
  84 002c 42F00402 		orr	r2, r2, #4
  85 0030 9A61     		str	r2, [r3, #24]
  86 0032 9B69     		ldr	r3, [r3, #24]
  87 0034 03F00403 		and	r3, r3, #4
  88 0038 0393     		str	r3, [sp, #12]
  89 003a 039B     		ldr	r3, [sp, #12]
  90              	.LBE4:
 288:Src/main.c    **** 
  91              		.loc 1 288 0
  92 003c 0B4C     		ldr	r4, .L5+4
  93 003e 0122     		movs	r2, #1
  94 0040 4FF4E041 		mov	r1, #28672
  95 0044 2046     		mov	r0, r4
  96 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
  97              	.LVL1:
 291:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  98              		.loc 1 291 0
  99 004a 4FF4E043 		mov	r3, #28672
 100 004e 0493     		str	r3, [sp, #16]
 292:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 101              		.loc 1 292 0
 102 0050 0123     		movs	r3, #1
 103 0052 0593     		str	r3, [sp, #20]
 293:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 104              		.loc 1 293 0
 105 0054 0023     		movs	r3, #0
 106 0056 0693     		str	r3, [sp, #24]
 294:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 294 0
 108 0058 0223     		movs	r3, #2
 109 005a 0793     		str	r3, [sp, #28]
 295:Src/main.c    **** 
 110              		.loc 1 295 0
 111 005c 04A9     		add	r1, sp, #16
 112 005e 2046     		mov	r0, r4
 113 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 114              	.LVL2:
 297:Src/main.c    **** 
 115              		.loc 1 297 0
ARM GAS  /tmp/ccpYWkgm.s 			page 9


 116 0064 08B0     		add	sp, sp, #32
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 8
 119              		@ sp needed
 120 0066 10BD     		pop	{r4, pc}
 121              	.L6:
 122              		.align	2
 123              	.L5:
 124 0068 00100240 		.word	1073876992
 125 006c 000C0140 		.word	1073810432
 126              		.cfi_endproc
 127              	.LFE74:
 129              		.section	.text.StartTask01,"ax",%progbits
 130              		.align	1
 131              		.global	StartTask01
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu softvfp
 137              	StartTask01:
 138              	.LFB75:
 311:Src/main.c    **** 
 139              		.loc 1 311 0
 140              		.cfi_startproc
 141              		@ Volatile: function does not return.
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              	.LVL3:
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI3:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
 150              	.LVL4:
 151              	.L8:
 152              	.LBB5:
 317:Src/main.c    ****     receiveCanard();
 153              		.loc 1 317 0 discriminator 1
 154 0002 FFF7FEFF 		bl	sendCanard
 155              	.LVL5:
 318:Src/main.c    ****     spinCanard();
 156              		.loc 1 318 0 discriminator 1
 157 0006 FFF7FEFF 		bl	receiveCanard
 158              	.LVL6:
 319:Src/main.c    ****   }
 159              		.loc 1 319 0 discriminator 1
 160 000a FFF7FEFF 		bl	spinCanard
 161              	.LVL7:
 162 000e F8E7     		b	.L8
 163              	.LBE5:
 164              		.cfi_endproc
 165              	.LFE75:
 167              		.section	.text._Error_Handler,"ax",%progbits
 168              		.align	1
 169              		.global	_Error_Handler
 170              		.syntax unified
 171              		.thumb
ARM GAS  /tmp/ccpYWkgm.s 			page 10


 172              		.thumb_func
 173              		.fpu softvfp
 175              	_Error_Handler:
 176              	.LFB77:
 333:Src/main.c    ****   /* USER CODE BEGIN StartTask02 */
 334:Src/main.c    ****   /* Infinite loop */
 335:Src/main.c    ****   while(1)
 336:Src/main.c    ****   {
 337:Src/main.c    ****       
 338:Src/main.c    ****      
 339:Src/main.c    ****   }
 340:Src/main.c    ****   /* USER CODE END StartTask02 */
 341:Src/main.c    **** }
 342:Src/main.c    **** 
 343:Src/main.c    **** /**
 344:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 345:Src/main.c    ****   * @param  file: The file name as string.
 346:Src/main.c    ****   * @param  line: The line in file as a number.
 347:Src/main.c    ****   * @retval None
 348:Src/main.c    ****   */
 349:Src/main.c    **** void _Error_Handler(char *file, int line)
 350:Src/main.c    **** {
 177              		.loc 1 350 0
 178              		.cfi_startproc
 179              		@ Volatile: function does not return.
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 183              	.LVL8:
 184              	.L11:
 185 0000 FEE7     		b	.L11
 186              		.cfi_endproc
 187              	.LFE77:
 189              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 190              		.align	1
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu softvfp
 196              	MX_USART1_UART_Init:
 197              	.LFB73:
 253:Src/main.c    **** 
 198              		.loc 1 253 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 253:Src/main.c    **** 
 202              		.loc 1 253 0
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI4:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 255:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 208              		.loc 1 255 0
 209 0002 0B48     		ldr	r0, .L16
 210 0004 0B4B     		ldr	r3, .L16+4
ARM GAS  /tmp/ccpYWkgm.s 			page 11


 211 0006 0360     		str	r3, [r0]
 256:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 212              		.loc 1 256 0
 213 0008 4FF4E133 		mov	r3, #115200
 214 000c 4360     		str	r3, [r0, #4]
 257:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 215              		.loc 1 257 0
 216 000e 0023     		movs	r3, #0
 217 0010 8360     		str	r3, [r0, #8]
 258:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 218              		.loc 1 258 0
 219 0012 C360     		str	r3, [r0, #12]
 259:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 220              		.loc 1 259 0
 221 0014 0361     		str	r3, [r0, #16]
 260:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 222              		.loc 1 260 0
 223 0016 0C22     		movs	r2, #12
 224 0018 4261     		str	r2, [r0, #20]
 261:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 225              		.loc 1 261 0
 226 001a 8361     		str	r3, [r0, #24]
 262:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 227              		.loc 1 262 0
 228 001c C361     		str	r3, [r0, #28]
 263:Src/main.c    ****   {
 229              		.loc 1 263 0
 230 001e FFF7FEFF 		bl	HAL_UART_Init
 231              	.LVL9:
 232 0022 00B9     		cbnz	r0, .L15
 233 0024 08BD     		pop	{r3, pc}
 234              	.L15:
 265:Src/main.c    ****   }
 235              		.loc 1 265 0
 236 0026 40F20911 		movw	r1, #265
 237 002a 0348     		ldr	r0, .L16+8
 238 002c FFF7FEFF 		bl	_Error_Handler
 239              	.LVL10:
 240              	.L17:
 241              		.align	2
 242              	.L16:
 243 0030 00000000 		.word	huart1
 244 0034 00380140 		.word	1073821696
 245 0038 00000000 		.word	.LC4
 246              		.cfi_endproc
 247              	.LFE73:
 249              		.section	.text.MX_CAN_Init,"ax",%progbits
 250              		.align	1
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu softvfp
 256              	MX_CAN_Init:
 257              	.LFB72:
 230:Src/main.c    **** 
 258              		.loc 1 230 0
 259              		.cfi_startproc
ARM GAS  /tmp/ccpYWkgm.s 			page 12


 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262 0000 08B5     		push	{r3, lr}
 263              	.LCFI5:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
 232:Src/main.c    ****   hcan.Init.Prescaler = 16;
 267              		.loc 1 232 0
 268 0002 0C48     		ldr	r0, .L22
 269 0004 0C4B     		ldr	r3, .L22+4
 270 0006 0360     		str	r3, [r0]
 233:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 271              		.loc 1 233 0
 272 0008 1023     		movs	r3, #16
 273 000a 4360     		str	r3, [r0, #4]
 234:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 274              		.loc 1 234 0
 275 000c 0023     		movs	r3, #0
 276 000e 8360     		str	r3, [r0, #8]
 235:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_1TQ;
 277              		.loc 1 235 0
 278 0010 C360     		str	r3, [r0, #12]
 236:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_1TQ;
 279              		.loc 1 236 0
 280 0012 0361     		str	r3, [r0, #16]
 237:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 281              		.loc 1 237 0
 282 0014 4361     		str	r3, [r0, #20]
 238:Src/main.c    ****   hcan.Init.ABOM = DISABLE;
 283              		.loc 1 238 0
 284 0016 8361     		str	r3, [r0, #24]
 239:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 285              		.loc 1 239 0
 286 0018 C361     		str	r3, [r0, #28]
 240:Src/main.c    ****   hcan.Init.NART = DISABLE;
 287              		.loc 1 240 0
 288 001a 0362     		str	r3, [r0, #32]
 241:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 289              		.loc 1 241 0
 290 001c 4362     		str	r3, [r0, #36]
 242:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 291              		.loc 1 242 0
 292 001e 8362     		str	r3, [r0, #40]
 243:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 293              		.loc 1 243 0
 294 0020 C362     		str	r3, [r0, #44]
 244:Src/main.c    ****   {
 295              		.loc 1 244 0
 296 0022 FFF7FEFF 		bl	HAL_CAN_Init
 297              	.LVL11:
 298 0026 00B9     		cbnz	r0, .L21
 299 0028 08BD     		pop	{r3, pc}
 300              	.L21:
 246:Src/main.c    ****   }
 301              		.loc 1 246 0
 302 002a F621     		movs	r1, #246
ARM GAS  /tmp/ccpYWkgm.s 			page 13


 303 002c 0348     		ldr	r0, .L22+8
 304 002e FFF7FEFF 		bl	_Error_Handler
 305              	.LVL12:
 306              	.L23:
 307 0032 00BF     		.align	2
 308              	.L22:
 309 0034 00000000 		.word	hcan
 310 0038 00640040 		.word	1073767424
 311 003c 00000000 		.word	.LC4
 312              		.cfi_endproc
 313              	.LFE72:
 315              		.section	.text.SystemClock_Config,"ax",%progbits
 316              		.align	1
 317              		.global	SystemClock_Config
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu softvfp
 323              	SystemClock_Config:
 324              	.LFB71:
 183:Src/main.c    **** 
 325              		.loc 1 183 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 64
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329 0000 00B5     		push	{lr}
 330              	.LCFI6:
 331              		.cfi_def_cfa_offset 4
 332              		.cfi_offset 14, -4
 333 0002 91B0     		sub	sp, sp, #68
 334              	.LCFI7:
 335              		.cfi_def_cfa_offset 72
 190:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 336              		.loc 1 190 0
 337 0004 0122     		movs	r2, #1
 338 0006 0692     		str	r2, [sp, #24]
 191:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 339              		.loc 1 191 0
 340 0008 4FF48033 		mov	r3, #65536
 341 000c 0793     		str	r3, [sp, #28]
 192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 342              		.loc 1 192 0
 343 000e 0021     		movs	r1, #0
 344 0010 0891     		str	r1, [sp, #32]
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 345              		.loc 1 193 0
 346 0012 0A92     		str	r2, [sp, #40]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 347              		.loc 1 194 0
 348 0014 0222     		movs	r2, #2
 349 0016 0D92     		str	r2, [sp, #52]
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 350              		.loc 1 195 0
 351 0018 0E93     		str	r3, [sp, #56]
 196:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 352              		.loc 1 196 0
 353 001a 4FF4E013 		mov	r3, #1835008
ARM GAS  /tmp/ccpYWkgm.s 			page 14


 354 001e 0F93     		str	r3, [sp, #60]
 197:Src/main.c    ****   {
 355              		.loc 1 197 0
 356 0020 06A8     		add	r0, sp, #24
 357 0022 FFF7FEFF 		bl	HAL_RCC_OscConfig
 358              	.LVL13:
 359 0026 08BB     		cbnz	r0, .L28
 204:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 360              		.loc 1 204 0
 361 0028 0F23     		movs	r3, #15
 362 002a 0193     		str	r3, [sp, #4]
 206:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 363              		.loc 1 206 0
 364 002c 0221     		movs	r1, #2
 365 002e 0291     		str	r1, [sp, #8]
 207:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 366              		.loc 1 207 0
 367 0030 0023     		movs	r3, #0
 368 0032 0393     		str	r3, [sp, #12]
 208:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 369              		.loc 1 208 0
 370 0034 4FF48062 		mov	r2, #1024
 371 0038 0492     		str	r2, [sp, #16]
 209:Src/main.c    **** 
 372              		.loc 1 209 0
 373 003a 0593     		str	r3, [sp, #20]
 211:Src/main.c    ****   {
 374              		.loc 1 211 0
 375 003c 01A8     		add	r0, sp, #4
 376 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 377              	.LVL14:
 378 0042 B8B9     		cbnz	r0, .L29
 218:Src/main.c    **** 
 379              		.loc 1 218 0
 380 0044 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 381              	.LVL15:
 382 0048 0C4B     		ldr	r3, .L30
 383 004a A3FB0030 		umull	r3, r0, r3, r0
 384 004e 8009     		lsrs	r0, r0, #6
 385 0050 FFF7FEFF 		bl	HAL_SYSTICK_Config
 386              	.LVL16:
 222:Src/main.c    **** 
 387              		.loc 1 222 0
 388 0054 0420     		movs	r0, #4
 389 0056 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 390              	.LVL17:
 225:Src/main.c    **** }
 391              		.loc 1 225 0
 392 005a 0022     		movs	r2, #0
 393 005c 0F21     		movs	r1, #15
 394 005e 4FF0FF30 		mov	r0, #-1
 395 0062 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 396              	.LVL18:
 226:Src/main.c    **** 
 397              		.loc 1 226 0
 398 0066 11B0     		add	sp, sp, #68
 399              	.LCFI8:
ARM GAS  /tmp/ccpYWkgm.s 			page 15


 400              		.cfi_remember_state
 401              		.cfi_def_cfa_offset 4
 402              		@ sp needed
 403 0068 5DF804FB 		ldr	pc, [sp], #4
 404              	.L28:
 405              	.LCFI9:
 406              		.cfi_restore_state
 199:Src/main.c    ****   }
 407              		.loc 1 199 0
 408 006c C721     		movs	r1, #199
 409 006e 0448     		ldr	r0, .L30+4
 410 0070 FFF7FEFF 		bl	_Error_Handler
 411              	.LVL19:
 412              	.L29:
 213:Src/main.c    ****   }
 413              		.loc 1 213 0
 414 0074 D521     		movs	r1, #213
 415 0076 0248     		ldr	r0, .L30+4
 416 0078 FFF7FEFF 		bl	_Error_Handler
 417              	.LVL20:
 418              	.L31:
 419              		.align	2
 420              	.L30:
 421 007c D34D6210 		.word	274877907
 422 0080 00000000 		.word	.LC4
 423              		.cfi_endproc
 424              	.LFE71:
 426              		.section	.text.main,"ax",%progbits
 427              		.align	1
 428              		.global	main
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu softvfp
 434              	main:
 435              	.LFB70:
  99:Src/main.c    ****   /* USER CODE BEGIN 1 */
 436              		.loc 1 99 0
 437              		.cfi_startproc
 438              		@ Volatile: function does not return.
 439              		@ args = 0, pretend = 0, frame = 40
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441 0000 00B5     		push	{lr}
 442              	.LCFI10:
 443              		.cfi_def_cfa_offset 4
 444              		.cfi_offset 14, -4
 445 0002 8BB0     		sub	sp, sp, #44
 446              	.LCFI11:
 447              		.cfi_def_cfa_offset 48
 107:Src/main.c    **** 
 448              		.loc 1 107 0
 449 0004 FFF7FEFF 		bl	HAL_Init
 450              	.LVL21:
 114:Src/main.c    **** 
 451              		.loc 1 114 0
 452 0008 FFF7FEFF 		bl	SystemClock_Config
 453              	.LVL22:
ARM GAS  /tmp/ccpYWkgm.s 			page 16


 121:Src/main.c    ****   MX_USART1_UART_Init();
 454              		.loc 1 121 0
 455 000c FFF7FEFF 		bl	MX_GPIO_Init
 456              	.LVL23:
 122:Src/main.c    ****   MX_CAN_Init();
 457              		.loc 1 122 0
 458 0010 FFF7FEFF 		bl	MX_USART1_UART_Init
 459              	.LVL24:
 123:Src/main.c    ****   uavcanInit();
 460              		.loc 1 123 0
 461 0014 FFF7FEFF 		bl	MX_CAN_Init
 462              	.LVL25:
 124:Src/main.c    **** 
 463              		.loc 1 124 0
 464 0018 FFF7FEFF 		bl	uavcanInit
 465              	.LVL26:
 144:Src/main.c    ****   Task01Handle = osThreadCreate(osThread(Task01), NULL);
 466              		.loc 1 144 0
 467 001c 0D4C     		ldr	r4, .L35
 468 001e 05AD     		add	r5, sp, #20
 469 0020 2646     		mov	r6, r4
 470 0022 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 471 0024 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 472 0026 3368     		ldr	r3, [r6]
 473 0028 2B60     		str	r3, [r5]
 145:Src/main.c    **** 
 474              		.loc 1 145 0
 475 002a 0021     		movs	r1, #0
 476 002c 05A8     		add	r0, sp, #20
 477 002e FFF7FEFF 		bl	osThreadCreate
 478              	.LVL27:
 479 0032 094B     		ldr	r3, .L35+4
 480 0034 1860     		str	r0, [r3]
 148:Src/main.c    ****   Task02Handle = osThreadCreate(osThread(Task02), NULL);
 481              		.loc 1 148 0
 482 0036 6D46     		mov	r5, sp
 483 0038 1434     		adds	r4, r4, #20
 484 003a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 485 003c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 486 003e 2368     		ldr	r3, [r4]
 487 0040 2B60     		str	r3, [r5]
 149:Src/main.c    **** 
 488              		.loc 1 149 0
 489 0042 0021     		movs	r1, #0
 490 0044 6846     		mov	r0, sp
 491 0046 FFF7FEFF 		bl	osThreadCreate
 492              	.LVL28:
 493 004a 044B     		ldr	r3, .L35+8
 494 004c 1860     		str	r0, [r3]
 160:Src/main.c    ****   
 495              		.loc 1 160 0
 496 004e FFF7FEFF 		bl	osKernelStart
 497              	.LVL29:
 498              	.L33:
 499 0052 FEE7     		b	.L33
 500              	.L36:
 501              		.align	2
ARM GAS  /tmp/ccpYWkgm.s 			page 17


 502              	.L35:
 503 0054 00000000 		.word	.LANCHOR0
 504 0058 00000000 		.word	Task01Handle
 505 005c 00000000 		.word	Task02Handle
 506              		.cfi_endproc
 507              	.LFE70:
 509              		.comm	Task02Handle,4,4
 510              		.comm	Task01Handle,4,4
 511              		.comm	huart1,64,4
 512              		.comm	hcan,68,4
 513              		.section	.rodata
 514              		.align	2
 515              		.set	.LANCHOR0,. + 0
 516              	.LC5:
 517 0000 08000000 		.word	.LC0
 518 0004 00000000 		.word	StartTask01
 519 0008 0000     		.short	0
 520 000a 0000     		.space	2
 521 000c 00000000 		.word	0
 522 0010 00010000 		.word	256
 523              	.LC6:
 524 0014 00000000 		.word	.LC2
 525 0018 00000000 		.word	StartTask02
 526 001c 0000     		.short	0
 527 001e 0000     		.space	2
 528 0020 00000000 		.word	0
 529 0024 80000000 		.word	128
 530              		.section	.rodata.MX_USART1_UART_Init.str1.4,"aMS",%progbits,1
 531              		.align	2
 532              	.LC4:
 533 0000 5372632F 		.ascii	"Src/main.c\000"
 533      6D61696E 
 533      2E6300
 534              		.section	.rodata.str1.4,"aMS",%progbits,1
 535              		.align	2
 536              	.LC2:
 537 0000 5461736B 		.ascii	"Task02\000"
 537      303200
 538 0007 00       		.space	1
 539              	.LC0:
 540 0008 5461736B 		.ascii	"Task01\000"
 540      303100
 541              		.text
 542              	.Letext0:
 543              		.file 2 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.
 544              		.file 3 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 545              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 546              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 547              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 548              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 549              		.file 8 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 550              		.file 9 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 551              		.file 10 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h
 552              		.file 11 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 553              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 554              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 555              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
ARM GAS  /tmp/ccpYWkgm.s 			page 18


 556              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 557              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 558              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 559              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 560              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 561              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 562              		.file 21 "/usr/bin/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h"
 563              		.file 22 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 564              		.file 23 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccpYWkgm.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccpYWkgm.s:16     .text.StartTask02:0000000000000000 $t
     /tmp/ccpYWkgm.s:23     .text.StartTask02:0000000000000000 StartTask02
     /tmp/ccpYWkgm.s:39     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccpYWkgm.s:45     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccpYWkgm.s:124    .text.MX_GPIO_Init:0000000000000068 $d
     /tmp/ccpYWkgm.s:130    .text.StartTask01:0000000000000000 $t
     /tmp/ccpYWkgm.s:137    .text.StartTask01:0000000000000000 StartTask01
     /tmp/ccpYWkgm.s:168    .text._Error_Handler:0000000000000000 $t
     /tmp/ccpYWkgm.s:175    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccpYWkgm.s:190    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccpYWkgm.s:196    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccpYWkgm.s:243    .text.MX_USART1_UART_Init:0000000000000030 $d
                            *COM*:0000000000000040 huart1
     /tmp/ccpYWkgm.s:250    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccpYWkgm.s:256    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccpYWkgm.s:309    .text.MX_CAN_Init:0000000000000034 $d
                            *COM*:0000000000000044 hcan
     /tmp/ccpYWkgm.s:316    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccpYWkgm.s:323    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccpYWkgm.s:421    .text.SystemClock_Config:000000000000007c $d
     /tmp/ccpYWkgm.s:427    .text.main:0000000000000000 $t
     /tmp/ccpYWkgm.s:434    .text.main:0000000000000000 main
     /tmp/ccpYWkgm.s:503    .text.main:0000000000000054 $d
                            *COM*:0000000000000004 Task01Handle
                            *COM*:0000000000000004 Task02Handle
     /tmp/ccpYWkgm.s:514    .rodata:0000000000000000 $d
     /tmp/ccpYWkgm.s:531    .rodata.MX_USART1_UART_Init.str1.4:0000000000000000 $d
     /tmp/ccpYWkgm.s:535    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
sendCanard
receiveCanard
spinCanard
HAL_UART_Init
HAL_CAN_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
uavcanInit
osThreadCreate
osKernelStart
